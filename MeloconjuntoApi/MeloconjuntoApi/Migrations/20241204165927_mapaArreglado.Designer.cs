// <auto-generated />
using System;
using MeloconjuntoApi.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MeloconjuntoApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241204165927_mapaArreglado")]
    partial class mapaArreglado
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MeloconjuntoApi.Models.Credencial", b =>
                {
                    b.Property<int>("CredencialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CredencialId"));

                    b.Property<string>("CredencialCorreo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CredencialPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("CredencialId");

                    b.HasIndex("CredencialCorreo")
                        .IsUnique();

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Credenciales");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Dificultad", b =>
                {
                    b.Property<int>("DificultadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DificultadId"));

                    b.Property<string>("DificultadNombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("DificultadId");

                    b.ToTable("Dificultades");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Mapa", b =>
                {
                    b.Property<int>("MapaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MapaId"));

                    b.Property<int>("DificultadId")
                        .HasColumnType("integer");

                    b.Property<string>("MapaNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("MapaId");

                    b.HasIndex("DificultadId");

                    b.ToTable("Mapas");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Nivel", b =>
                {
                    b.Property<int>("NivelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NivelId"));

                    b.Property<int>("MapaId")
                        .HasColumnType("integer");

                    b.Property<string>("NivelName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.HasKey("NivelId");

                    b.HasIndex("MapaId");

                    b.ToTable("Niveles");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Pregunta", b =>
                {
                    b.Property<int>("PreguntaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PreguntaId"));

                    b.Property<int>("NivelId")
                        .HasColumnType("integer");

                    b.Property<string>("PreguntaSentencia")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.HasKey("PreguntaId");

                    b.HasIndex("NivelId")
                        .IsUnique();

                    b.ToTable("Preguntas");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Puntaje", b =>
                {
                    b.Property<int>("PuntajeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PuntajeId"));

                    b.Property<int>("NivelId")
                        .HasColumnType("integer");

                    b.Property<int>("PuntajeAciertos")
                        .HasColumnType("integer");

                    b.Property<int>("PuntajeErrores")
                        .HasColumnType("integer");

                    b.Property<int>("PuntajePuntos")
                        .HasColumnType("integer");

                    b.Property<decimal>("PuntajeTime")
                        .HasColumnType("numeric(3,2)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("PuntajeId");

                    b.HasIndex("NivelId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Puntajes");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Ranking", b =>
                {
                    b.Property<int>("RankingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RankingId"));

                    b.Property<string>("RankingNombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RankingId");

                    b.ToTable("Rankings");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.RankingUsuario", b =>
                {
                    b.Property<int>("RankingUsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RankingUsuarioId"));

                    b.Property<int>("RankingId")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("RankingUsuarioId");

                    b.HasIndex("RankingId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("RankingsUsuarios");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.RecuperaPassword", b =>
                {
                    b.Property<int>("RecuperaPasswordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RecuperaPasswordId"));

                    b.Property<DateTime>("RecuperaPasswordFechaLimite")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RecuperaPasswordFechaSolicitud")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RecuperaPasswordToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("RecuperaPasswordId");

                    b.HasIndex("RecuperaPasswordToken")
                        .IsUnique();

                    b.HasIndex("UsuarioId");

                    b.ToTable("RecuperarPasswords");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Respuesta", b =>
                {
                    b.Property<int>("RespuestaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RespuestaId"));

                    b.Property<int>("PreguntaId")
                        .HasColumnType("integer");

                    b.Property<bool>("RespuestaCorrecta")
                        .HasColumnType("boolean");

                    b.Property<string>("RespuestaSentencia")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.HasKey("RespuestaId");

                    b.HasIndex("PreguntaId");

                    b.ToTable("Respuestas");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Rol", b =>
                {
                    b.Property<int>("RolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RolId"));

                    b.Property<string>("RolNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RolId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UsuarioId"));

                    b.Property<bool>("UsuarioActivo")
                        .HasColumnType("boolean");

                    b.Property<string>("UsuarioApellido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("UsuarioEdad")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UsuarioFechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsuarioNombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioTokenActivacion")
                        .HasColumnType("text");

                    b.Property<DateTime>("UsuarioTokenVence")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.UsuarioRol", b =>
                {
                    b.Property<int>("UsuarioRolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UsuarioRolId"));

                    b.Property<int>("RolId")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("UsuarioRolId");

                    b.HasIndex("RolId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuariosRoles");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Credencial", b =>
                {
                    b.HasOne("MeloconjuntoApi.Models.Usuario", "Usuario")
                        .WithOne("Credenciales")
                        .HasForeignKey("MeloconjuntoApi.Models.Credencial", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Mapa", b =>
                {
                    b.HasOne("MeloconjuntoApi.Models.Dificultad", "Dificultad")
                        .WithMany("Mapas")
                        .HasForeignKey("DificultadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dificultad");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Nivel", b =>
                {
                    b.HasOne("MeloconjuntoApi.Models.Mapa", "Mapa")
                        .WithMany("Niveles")
                        .HasForeignKey("MapaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mapa");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Pregunta", b =>
                {
                    b.HasOne("MeloconjuntoApi.Models.Nivel", "Nivel")
                        .WithOne("Pregunta")
                        .HasForeignKey("MeloconjuntoApi.Models.Pregunta", "NivelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nivel");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Puntaje", b =>
                {
                    b.HasOne("MeloconjuntoApi.Models.Nivel", "Nivel")
                        .WithMany("Puntajes")
                        .HasForeignKey("NivelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeloconjuntoApi.Models.Usuario", "Usuario")
                        .WithMany("Puntajes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nivel");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.RankingUsuario", b =>
                {
                    b.HasOne("MeloconjuntoApi.Models.Ranking", "Ranking")
                        .WithMany("RankingsUsuarios")
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeloconjuntoApi.Models.Usuario", "Usuario")
                        .WithMany("RankingsUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ranking");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.RecuperaPassword", b =>
                {
                    b.HasOne("MeloconjuntoApi.Models.Usuario", "Usuario")
                        .WithMany("RecuperarPasswords")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Respuesta", b =>
                {
                    b.HasOne("MeloconjuntoApi.Models.Pregunta", "Pregunta")
                        .WithMany("Respuestas")
                        .HasForeignKey("PreguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pregunta");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.UsuarioRol", b =>
                {
                    b.HasOne("MeloconjuntoApi.Models.Rol", "Rol")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeloconjuntoApi.Models.Usuario", "Usuario")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Dificultad", b =>
                {
                    b.Navigation("Mapas");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Mapa", b =>
                {
                    b.Navigation("Niveles");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Nivel", b =>
                {
                    b.Navigation("Pregunta")
                        .IsRequired();

                    b.Navigation("Puntajes");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Pregunta", b =>
                {
                    b.Navigation("Respuestas");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Ranking", b =>
                {
                    b.Navigation("RankingsUsuarios");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Rol", b =>
                {
                    b.Navigation("UsuariosRoles");
                });

            modelBuilder.Entity("MeloconjuntoApi.Models.Usuario", b =>
                {
                    b.Navigation("Credenciales")
                        .IsRequired();

                    b.Navigation("Puntajes");

                    b.Navigation("RankingsUsuarios");

                    b.Navigation("RecuperarPasswords");

                    b.Navigation("UsuariosRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
